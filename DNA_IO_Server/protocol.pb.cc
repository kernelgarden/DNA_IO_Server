// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dna_info {

namespace {

const ::google::protobuf::Descriptor* PacketHeader_PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PacketHeader_PB_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncInfo_S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncInfo_S_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncInfo_S_User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncInfo_S_User_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncInfo_C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncInfo_C_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* packet_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocol_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_protocol_2eproto() {
  protobuf_AddDesc_protocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocol.proto");
  GOOGLE_CHECK(file != NULL);
  PacketHeader_PB_descriptor_ = file->message_type(0);
  static const int PacketHeader_PB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader_PB, packet_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader_PB, packet_type_),
  };
  PacketHeader_PB_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PacketHeader_PB_descriptor_,
      PacketHeader_PB::internal_default_instance(),
      PacketHeader_PB_offsets_,
      -1,
      -1,
      -1,
      sizeof(PacketHeader_PB),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader_PB, _internal_metadata_));
  LoginRequest_descriptor_ = file->message_type(1);
  static const int LoginRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, passwd_),
  };
  LoginRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginRequest_descriptor_,
      LoginRequest::internal_default_instance(),
      LoginRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoginRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _internal_metadata_));
  LoginResponse_descriptor_ = file->message_type(2);
  static const int LoginResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, response_code_),
  };
  LoginResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginResponse_descriptor_,
      LoginResponse::internal_default_instance(),
      LoginResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoginResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _internal_metadata_));
  UserInfo_descriptor_ = file->message_type(3);
  static const int UserInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, identify_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, channel_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, session_num_),
  };
  UserInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::internal_default_instance(),
      UserInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _internal_metadata_));
  SyncInfo_S_descriptor_ = file->message_type(4);
  static const int SyncInfo_S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo_S, users_),
  };
  SyncInfo_S_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SyncInfo_S_descriptor_,
      SyncInfo_S::internal_default_instance(),
      SyncInfo_S_offsets_,
      -1,
      -1,
      -1,
      sizeof(SyncInfo_S),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo_S, _internal_metadata_));
  SyncInfo_S_User_descriptor_ = SyncInfo_S_descriptor_->nested_type(0);
  static const int SyncInfo_S_User_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo_S_User, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo_S_User, x_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo_S_User, y_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo_S_User, vec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo_S_User, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo_S_User, a_type_pow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo_S_User, b_type_pow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo_S_User, c_type_pow_),
  };
  SyncInfo_S_User_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SyncInfo_S_User_descriptor_,
      SyncInfo_S_User::internal_default_instance(),
      SyncInfo_S_User_offsets_,
      -1,
      -1,
      -1,
      sizeof(SyncInfo_S_User),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo_S_User, _internal_metadata_));
  SyncInfo_C_descriptor_ = file->message_type(5);
  static const int SyncInfo_C_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo_C, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo_C, x_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo_C, y_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo_C, vec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo_C, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo_C, a_type_pow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo_C, b_type_pow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo_C, c_type_pow_),
  };
  SyncInfo_C_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SyncInfo_C_descriptor_,
      SyncInfo_C::internal_default_instance(),
      SyncInfo_C_offsets_,
      -1,
      -1,
      -1,
      sizeof(SyncInfo_C),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo_C, _internal_metadata_));
  packet_type_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PacketHeader_PB_descriptor_, PacketHeader_PB::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginRequest_descriptor_, LoginRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginResponse_descriptor_, LoginResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserInfo_descriptor_, UserInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SyncInfo_S_descriptor_, SyncInfo_S::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SyncInfo_S_User_descriptor_, SyncInfo_S_User::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SyncInfo_C_descriptor_, SyncInfo_C::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocol_2eproto() {
  PacketHeader_PB_default_instance_.Shutdown();
  delete PacketHeader_PB_reflection_;
  LoginRequest_default_instance_.Shutdown();
  delete LoginRequest_reflection_;
  LoginResponse_default_instance_.Shutdown();
  delete LoginResponse_reflection_;
  UserInfo_default_instance_.Shutdown();
  delete UserInfo_reflection_;
  SyncInfo_S_default_instance_.Shutdown();
  delete SyncInfo_S_reflection_;
  SyncInfo_S_User_default_instance_.Shutdown();
  delete SyncInfo_S_User_reflection_;
  SyncInfo_C_default_instance_.Shutdown();
  delete SyncInfo_C_reflection_;
}

void protobuf_InitDefaults_protocol_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  PacketHeader_PB_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  LoginRequest_default_instance_.DefaultConstruct();
  LoginResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  UserInfo_default_instance_.DefaultConstruct();
  SyncInfo_S_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SyncInfo_S_User_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SyncInfo_C_default_instance_.DefaultConstruct();
  PacketHeader_PB_default_instance_.get_mutable()->InitAsDefaultInstance();
  LoginRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  LoginResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  UserInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  SyncInfo_S_default_instance_.get_mutable()->InitAsDefaultInstance();
  SyncInfo_S_User_default_instance_.get_mutable()->InitAsDefaultInstance();
  SyncInfo_C_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_protocol_2eproto_once_);
void protobuf_InitDefaults_protocol_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_protocol_2eproto_once_,
                 &protobuf_InitDefaults_protocol_2eproto_impl);
}
void protobuf_AddDesc_protocol_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_protocol_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016protocol.proto\022\010dna_info\";\n\017PacketHead"
    "er_PB\022\023\n\013packet_size\030\001 \001(\r\022\023\n\013packet_typ"
    "e\030\002 \001(\005\"*\n\014LoginRequest\022\n\n\002id\030\002 \001(\t\022\016\n\006p"
    "asswd\030\003 \001(\t\"&\n\rLoginResponse\022\025\n\rresponse"
    "_code\030\002 \001(\005\"I\n\010UserInfo\022\023\n\013identify_id\030\002"
    " \001(\t\022\023\n\013channel_num\030\003 \001(\005\022\023\n\013session_num"
    "\030\004 \001(\005\"\305\001\n\nSyncInfo_S\022(\n\005users\030\002 \003(\0132\031.d"
    "na_info.SyncInfo_S.User\032\214\001\n\004User\022\017\n\007user"
    "_id\030\001 \001(\t\022\r\n\005x_pos\030\002 \001(\005\022\r\n\005y_pos\030\003 \001(\005\022"
    "\013\n\003vec\030\004 \001(\005\022\014\n\004type\030\005 \001(\005\022\022\n\nA_type_pow"
    "\030\006 \001(\005\022\022\n\nB_type_pow\030\007 \001(\005\022\022\n\nC_type_pow"
    "\030\010 \001(\005\"\222\001\n\nSyncInfo_C\022\017\n\007user_id\030\001 \001(\t\022\r"
    "\n\005x_pos\030\002 \001(\005\022\r\n\005y_pos\030\003 \001(\005\022\013\n\003vec\030\004 \001("
    "\005\022\014\n\004type\030\005 \001(\005\022\022\n\nA_type_pow\030\006 \001(\005\022\022\n\nB"
    "_type_pow\030\007 \001(\005\022\022\n\nC_type_pow\030\010 \001(\005*x\n\013p"
    "acket_type\022\r\n\tLOGIN_REQ\020\000\022\r\n\tLOGIN_RES\020\001"
    "\022\r\n\tUSER_INFO\020\002\022\017\n\013SYNC_INFO_S\020\003\022\017\n\013SYNC"
    "_INFO_C\020\004\022\014\n\010CHAT_REQ\020\005\022\014\n\010CHAT_RES\020\006b\006p"
    "roto3", 725);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_protocol_2eproto_once_);
void protobuf_AddDesc_protocol_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_protocol_2eproto_once_,
                 &protobuf_AddDesc_protocol_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_2eproto {
  StaticDescriptorInitializer_protocol_2eproto() {
    protobuf_AddDesc_protocol_2eproto();
  }
} static_descriptor_initializer_protocol_2eproto_;
const ::google::protobuf::EnumDescriptor* packet_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_type_descriptor_;
}
bool packet_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PacketHeader_PB::kPacketSizeFieldNumber;
const int PacketHeader_PB::kPacketTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PacketHeader_PB::PacketHeader_PB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_protocol_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:dna_info.PacketHeader_PB)
}

void PacketHeader_PB::InitAsDefaultInstance() {
}

PacketHeader_PB::PacketHeader_PB(const PacketHeader_PB& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dna_info.PacketHeader_PB)
}

void PacketHeader_PB::SharedCtor() {
  ::memset(&packet_size_, 0, reinterpret_cast<char*>(&packet_type_) -
    reinterpret_cast<char*>(&packet_size_) + sizeof(packet_type_));
  _cached_size_ = 0;
}

PacketHeader_PB::~PacketHeader_PB() {
  // @@protoc_insertion_point(destructor:dna_info.PacketHeader_PB)
  SharedDtor();
}

void PacketHeader_PB::SharedDtor() {
}

void PacketHeader_PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PacketHeader_PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PacketHeader_PB_descriptor_;
}

const PacketHeader_PB& PacketHeader_PB::default_instance() {
  protobuf_InitDefaults_protocol_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PacketHeader_PB> PacketHeader_PB_default_instance_;

PacketHeader_PB* PacketHeader_PB::New(::google::protobuf::Arena* arena) const {
  PacketHeader_PB* n = new PacketHeader_PB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PacketHeader_PB::Clear() {
// @@protoc_insertion_point(message_clear_start:dna_info.PacketHeader_PB)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PacketHeader_PB, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PacketHeader_PB*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(packet_size_, packet_type_);

#undef ZR_HELPER_
#undef ZR_

}

bool PacketHeader_PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dna_info.PacketHeader_PB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 packet_size = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packet_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_packet_type;
        break;
      }

      // optional int32 packet_type = 2;
      case 2: {
        if (tag == 16) {
         parse_packet_type:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packet_type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dna_info.PacketHeader_PB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dna_info.PacketHeader_PB)
  return false;
#undef DO_
}

void PacketHeader_PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dna_info.PacketHeader_PB)
  // optional uint32 packet_size = 1;
  if (this->packet_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->packet_size(), output);
  }

  // optional int32 packet_type = 2;
  if (this->packet_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->packet_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:dna_info.PacketHeader_PB)
}

::google::protobuf::uint8* PacketHeader_PB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dna_info.PacketHeader_PB)
  // optional uint32 packet_size = 1;
  if (this->packet_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->packet_size(), target);
  }

  // optional int32 packet_type = 2;
  if (this->packet_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->packet_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dna_info.PacketHeader_PB)
  return target;
}

size_t PacketHeader_PB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dna_info.PacketHeader_PB)
  size_t total_size = 0;

  // optional uint32 packet_size = 1;
  if (this->packet_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->packet_size());
  }

  // optional int32 packet_type = 2;
  if (this->packet_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->packet_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketHeader_PB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dna_info.PacketHeader_PB)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PacketHeader_PB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PacketHeader_PB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dna_info.PacketHeader_PB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dna_info.PacketHeader_PB)
    UnsafeMergeFrom(*source);
  }
}

void PacketHeader_PB::MergeFrom(const PacketHeader_PB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dna_info.PacketHeader_PB)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PacketHeader_PB::UnsafeMergeFrom(const PacketHeader_PB& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.packet_size() != 0) {
    set_packet_size(from.packet_size());
  }
  if (from.packet_type() != 0) {
    set_packet_type(from.packet_type());
  }
}

void PacketHeader_PB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dna_info.PacketHeader_PB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketHeader_PB::CopyFrom(const PacketHeader_PB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dna_info.PacketHeader_PB)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PacketHeader_PB::IsInitialized() const {

  return true;
}

void PacketHeader_PB::Swap(PacketHeader_PB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PacketHeader_PB::InternalSwap(PacketHeader_PB* other) {
  std::swap(packet_size_, other->packet_size_);
  std::swap(packet_type_, other->packet_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PacketHeader_PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PacketHeader_PB_descriptor_;
  metadata.reflection = PacketHeader_PB_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PacketHeader_PB

// optional uint32 packet_size = 1;
void PacketHeader_PB::clear_packet_size() {
  packet_size_ = 0u;
}
::google::protobuf::uint32 PacketHeader_PB::packet_size() const {
  // @@protoc_insertion_point(field_get:dna_info.PacketHeader_PB.packet_size)
  return packet_size_;
}
void PacketHeader_PB::set_packet_size(::google::protobuf::uint32 value) {
  
  packet_size_ = value;
  // @@protoc_insertion_point(field_set:dna_info.PacketHeader_PB.packet_size)
}

// optional int32 packet_type = 2;
void PacketHeader_PB::clear_packet_type() {
  packet_type_ = 0;
}
::google::protobuf::int32 PacketHeader_PB::packet_type() const {
  // @@protoc_insertion_point(field_get:dna_info.PacketHeader_PB.packet_type)
  return packet_type_;
}
void PacketHeader_PB::set_packet_type(::google::protobuf::int32 value) {
  
  packet_type_ = value;
  // @@protoc_insertion_point(field_set:dna_info.PacketHeader_PB.packet_type)
}

inline const PacketHeader_PB* PacketHeader_PB::internal_default_instance() {
  return &PacketHeader_PB_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequest::kIdFieldNumber;
const int LoginRequest::kPasswdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequest::LoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_protocol_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:dna_info.LoginRequest)
}

void LoginRequest::InitAsDefaultInstance() {
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dna_info.LoginRequest)
}

void LoginRequest::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:dna_info.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequest_descriptor_;
}

const LoginRequest& LoginRequest::default_instance() {
  protobuf_InitDefaults_protocol_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LoginRequest> LoginRequest_default_instance_;

LoginRequest* LoginRequest::New(::google::protobuf::Arena* arena) const {
  LoginRequest* n = new LoginRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dna_info.LoginRequest)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dna_info.LoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dna_info.LoginRequest.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_passwd;
        break;
      }

      // optional string passwd = 3;
      case 3: {
        if (tag == 26) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dna_info.LoginRequest.passwd"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dna_info.LoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dna_info.LoginRequest)
  return false;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dna_info.LoginRequest)
  // optional string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dna_info.LoginRequest.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional string passwd = 3;
  if (this->passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dna_info.LoginRequest.passwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->passwd(), output);
  }

  // @@protoc_insertion_point(serialize_end:dna_info.LoginRequest)
}

::google::protobuf::uint8* LoginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dna_info.LoginRequest)
  // optional string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dna_info.LoginRequest.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional string passwd = 3;
  if (this->passwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dna_info.LoginRequest.passwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->passwd(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dna_info.LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dna_info.LoginRequest)
  size_t total_size = 0;

  // optional string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string passwd = 3;
  if (this->passwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->passwd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dna_info.LoginRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LoginRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dna_info.LoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dna_info.LoginRequest)
    UnsafeMergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dna_info.LoginRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LoginRequest::UnsafeMergeFrom(const LoginRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.passwd().size() > 0) {

    passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passwd_);
  }
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dna_info.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dna_info.LoginRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LoginRequest::IsInitialized() const {

  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequest::InternalSwap(LoginRequest* other) {
  id_.Swap(&other->id_);
  passwd_.Swap(&other->passwd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequest_descriptor_;
  metadata.reflection = LoginRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginRequest

// optional string id = 2;
void LoginRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginRequest::id() const {
  // @@protoc_insertion_point(field_get:dna_info.LoginRequest.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dna_info.LoginRequest.id)
}
void LoginRequest::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dna_info.LoginRequest.id)
}
void LoginRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dna_info.LoginRequest.id)
}
::std::string* LoginRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:dna_info.LoginRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRequest::release_id() {
  // @@protoc_insertion_point(field_release:dna_info.LoginRequest.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:dna_info.LoginRequest.id)
}

// optional string passwd = 3;
void LoginRequest::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginRequest::passwd() const {
  // @@protoc_insertion_point(field_get:dna_info.LoginRequest.passwd)
  return passwd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_passwd(const ::std::string& value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dna_info.LoginRequest.passwd)
}
void LoginRequest::set_passwd(const char* value) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dna_info.LoginRequest.passwd)
}
void LoginRequest::set_passwd(const char* value, size_t size) {
  
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dna_info.LoginRequest.passwd)
}
::std::string* LoginRequest::mutable_passwd() {
  
  // @@protoc_insertion_point(field_mutable:dna_info.LoginRequest.passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRequest::release_passwd() {
  // @@protoc_insertion_point(field_release:dna_info.LoginRequest.passwd)
  
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    
  } else {
    
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:dna_info.LoginRequest.passwd)
}

inline const LoginRequest* LoginRequest::internal_default_instance() {
  return &LoginRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginResponse::kResponseCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginResponse::LoginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_protocol_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:dna_info.LoginResponse)
}

void LoginResponse::InitAsDefaultInstance() {
}

LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dna_info.LoginResponse)
}

void LoginResponse::SharedCtor() {
  response_code_ = 0;
  _cached_size_ = 0;
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:dna_info.LoginResponse)
  SharedDtor();
}

void LoginResponse::SharedDtor() {
}

void LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResponse_descriptor_;
}

const LoginResponse& LoginResponse::default_instance() {
  protobuf_InitDefaults_protocol_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LoginResponse> LoginResponse_default_instance_;

LoginResponse* LoginResponse::New(::google::protobuf::Arena* arena) const {
  LoginResponse* n = new LoginResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dna_info.LoginResponse)
  response_code_ = 0;
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dna_info.LoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 response_code = 2;
      case 2: {
        if (tag == 16) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_code_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dna_info.LoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dna_info.LoginResponse)
  return false;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dna_info.LoginResponse)
  // optional int32 response_code = 2;
  if (this->response_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->response_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:dna_info.LoginResponse)
}

::google::protobuf::uint8* LoginResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dna_info.LoginResponse)
  // optional int32 response_code = 2;
  if (this->response_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->response_code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dna_info.LoginResponse)
  return target;
}

size_t LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dna_info.LoginResponse)
  size_t total_size = 0;

  // optional int32 response_code = 2;
  if (this->response_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->response_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dna_info.LoginResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LoginResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dna_info.LoginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dna_info.LoginResponse)
    UnsafeMergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dna_info.LoginResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LoginResponse::UnsafeMergeFrom(const LoginResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.response_code() != 0) {
    set_response_code(from.response_code());
  }
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dna_info.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dna_info.LoginResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LoginResponse::IsInitialized() const {

  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginResponse::InternalSwap(LoginResponse* other) {
  std::swap(response_code_, other->response_code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResponse_descriptor_;
  metadata.reflection = LoginResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginResponse

// optional int32 response_code = 2;
void LoginResponse::clear_response_code() {
  response_code_ = 0;
}
::google::protobuf::int32 LoginResponse::response_code() const {
  // @@protoc_insertion_point(field_get:dna_info.LoginResponse.response_code)
  return response_code_;
}
void LoginResponse::set_response_code(::google::protobuf::int32 value) {
  
  response_code_ = value;
  // @@protoc_insertion_point(field_set:dna_info.LoginResponse.response_code)
}

inline const LoginResponse* LoginResponse::internal_default_instance() {
  return &LoginResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserInfo::kIdentifyIdFieldNumber;
const int UserInfo::kChannelNumFieldNumber;
const int UserInfo::kSessionNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserInfo::UserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_protocol_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:dna_info.UserInfo)
}

void UserInfo::InitAsDefaultInstance() {
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dna_info.UserInfo)
}

void UserInfo::SharedCtor() {
  identify_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_num_, 0, reinterpret_cast<char*>(&session_num_) -
    reinterpret_cast<char*>(&channel_num_) + sizeof(session_num_));
  _cached_size_ = 0;
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:dna_info.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  identify_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  protobuf_InitDefaults_protocol_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UserInfo> UserInfo_default_instance_;

UserInfo* UserInfo::New(::google::protobuf::Arena* arena) const {
  UserInfo* n = new UserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dna_info.UserInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UserInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(channel_num_, session_num_);
  identify_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dna_info.UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string identify_id = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identify_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->identify_id().data(), this->identify_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dna_info.UserInfo.identify_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_channel_num;
        break;
      }

      // optional int32 channel_num = 3;
      case 3: {
        if (tag == 24) {
         parse_channel_num:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_num_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_session_num;
        break;
      }

      // optional int32 session_num = 4;
      case 4: {
        if (tag == 32) {
         parse_session_num:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_num_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dna_info.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dna_info.UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dna_info.UserInfo)
  // optional string identify_id = 2;
  if (this->identify_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->identify_id().data(), this->identify_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dna_info.UserInfo.identify_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->identify_id(), output);
  }

  // optional int32 channel_num = 3;
  if (this->channel_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channel_num(), output);
  }

  // optional int32 session_num = 4;
  if (this->session_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->session_num(), output);
  }

  // @@protoc_insertion_point(serialize_end:dna_info.UserInfo)
}

::google::protobuf::uint8* UserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dna_info.UserInfo)
  // optional string identify_id = 2;
  if (this->identify_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->identify_id().data(), this->identify_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dna_info.UserInfo.identify_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->identify_id(), target);
  }

  // optional int32 channel_num = 3;
  if (this->channel_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->channel_num(), target);
  }

  // optional int32 session_num = 4;
  if (this->session_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->session_num(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dna_info.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dna_info.UserInfo)
  size_t total_size = 0;

  // optional string identify_id = 2;
  if (this->identify_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->identify_id());
  }

  // optional int32 channel_num = 3;
  if (this->channel_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel_num());
  }

  // optional int32 session_num = 4;
  if (this->session_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->session_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dna_info.UserInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dna_info.UserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dna_info.UserInfo)
    UnsafeMergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dna_info.UserInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UserInfo::UnsafeMergeFrom(const UserInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.identify_id().size() > 0) {

    identify_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identify_id_);
  }
  if (from.channel_num() != 0) {
    set_channel_num(from.channel_num());
  }
  if (from.session_num() != 0) {
    set_session_num(from.session_num());
  }
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dna_info.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dna_info.UserInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UserInfo::IsInitialized() const {

  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserInfo::InternalSwap(UserInfo* other) {
  identify_id_.Swap(&other->identify_id_);
  std::swap(channel_num_, other->channel_num_);
  std::swap(session_num_, other->session_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserInfo

// optional string identify_id = 2;
void UserInfo::clear_identify_id() {
  identify_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserInfo::identify_id() const {
  // @@protoc_insertion_point(field_get:dna_info.UserInfo.identify_id)
  return identify_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfo::set_identify_id(const ::std::string& value) {
  
  identify_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dna_info.UserInfo.identify_id)
}
void UserInfo::set_identify_id(const char* value) {
  
  identify_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dna_info.UserInfo.identify_id)
}
void UserInfo::set_identify_id(const char* value, size_t size) {
  
  identify_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dna_info.UserInfo.identify_id)
}
::std::string* UserInfo::mutable_identify_id() {
  
  // @@protoc_insertion_point(field_mutable:dna_info.UserInfo.identify_id)
  return identify_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfo::release_identify_id() {
  // @@protoc_insertion_point(field_release:dna_info.UserInfo.identify_id)
  
  return identify_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfo::set_allocated_identify_id(::std::string* identify_id) {
  if (identify_id != NULL) {
    
  } else {
    
  }
  identify_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identify_id);
  // @@protoc_insertion_point(field_set_allocated:dna_info.UserInfo.identify_id)
}

// optional int32 channel_num = 3;
void UserInfo::clear_channel_num() {
  channel_num_ = 0;
}
::google::protobuf::int32 UserInfo::channel_num() const {
  // @@protoc_insertion_point(field_get:dna_info.UserInfo.channel_num)
  return channel_num_;
}
void UserInfo::set_channel_num(::google::protobuf::int32 value) {
  
  channel_num_ = value;
  // @@protoc_insertion_point(field_set:dna_info.UserInfo.channel_num)
}

// optional int32 session_num = 4;
void UserInfo::clear_session_num() {
  session_num_ = 0;
}
::google::protobuf::int32 UserInfo::session_num() const {
  // @@protoc_insertion_point(field_get:dna_info.UserInfo.session_num)
  return session_num_;
}
void UserInfo::set_session_num(::google::protobuf::int32 value) {
  
  session_num_ = value;
  // @@protoc_insertion_point(field_set:dna_info.UserInfo.session_num)
}

inline const UserInfo* UserInfo::internal_default_instance() {
  return &UserInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncInfo_S_User::kUserIdFieldNumber;
const int SyncInfo_S_User::kXPosFieldNumber;
const int SyncInfo_S_User::kYPosFieldNumber;
const int SyncInfo_S_User::kVecFieldNumber;
const int SyncInfo_S_User::kTypeFieldNumber;
const int SyncInfo_S_User::kATypePowFieldNumber;
const int SyncInfo_S_User::kBTypePowFieldNumber;
const int SyncInfo_S_User::kCTypePowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncInfo_S_User::SyncInfo_S_User()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_protocol_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:dna_info.SyncInfo_S.User)
}

void SyncInfo_S_User::InitAsDefaultInstance() {
}

SyncInfo_S_User::SyncInfo_S_User(const SyncInfo_S_User& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dna_info.SyncInfo_S.User)
}

void SyncInfo_S_User::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_pos_, 0, reinterpret_cast<char*>(&c_type_pow_) -
    reinterpret_cast<char*>(&x_pos_) + sizeof(c_type_pow_));
  _cached_size_ = 0;
}

SyncInfo_S_User::~SyncInfo_S_User() {
  // @@protoc_insertion_point(destructor:dna_info.SyncInfo_S.User)
  SharedDtor();
}

void SyncInfo_S_User::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SyncInfo_S_User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncInfo_S_User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncInfo_S_User_descriptor_;
}

const SyncInfo_S_User& SyncInfo_S_User::default_instance() {
  protobuf_InitDefaults_protocol_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SyncInfo_S_User> SyncInfo_S_User_default_instance_;

SyncInfo_S_User* SyncInfo_S_User::New(::google::protobuf::Arena* arena) const {
  SyncInfo_S_User* n = new SyncInfo_S_User;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SyncInfo_S_User::Clear() {
// @@protoc_insertion_point(message_clear_start:dna_info.SyncInfo_S.User)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SyncInfo_S_User, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SyncInfo_S_User*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_pos_, c_type_pow_);
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool SyncInfo_S_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dna_info.SyncInfo_S.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dna_info.SyncInfo_S.User.user_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x_pos;
        break;
      }

      // optional int32 x_pos = 2;
      case 2: {
        if (tag == 16) {
         parse_x_pos:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_pos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_y_pos;
        break;
      }

      // optional int32 y_pos = 3;
      case 3: {
        if (tag == 24) {
         parse_y_pos:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_pos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_vec;
        break;
      }

      // optional int32 vec = 4;
      case 4: {
        if (tag == 32) {
         parse_vec:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vec_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional int32 type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_A_type_pow;
        break;
      }

      // optional int32 A_type_pow = 6;
      case 6: {
        if (tag == 48) {
         parse_A_type_pow:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a_type_pow_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_B_type_pow;
        break;
      }

      // optional int32 B_type_pow = 7;
      case 7: {
        if (tag == 56) {
         parse_B_type_pow:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_type_pow_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_C_type_pow;
        break;
      }

      // optional int32 C_type_pow = 8;
      case 8: {
        if (tag == 64) {
         parse_C_type_pow:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &c_type_pow_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dna_info.SyncInfo_S.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dna_info.SyncInfo_S.User)
  return false;
#undef DO_
}

void SyncInfo_S_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dna_info.SyncInfo_S.User)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dna_info.SyncInfo_S.User.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // optional int32 x_pos = 2;
  if (this->x_pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x_pos(), output);
  }

  // optional int32 y_pos = 3;
  if (this->y_pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y_pos(), output);
  }

  // optional int32 vec = 4;
  if (this->vec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vec(), output);
  }

  // optional int32 type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // optional int32 A_type_pow = 6;
  if (this->a_type_pow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->a_type_pow(), output);
  }

  // optional int32 B_type_pow = 7;
  if (this->b_type_pow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->b_type_pow(), output);
  }

  // optional int32 C_type_pow = 8;
  if (this->c_type_pow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->c_type_pow(), output);
  }

  // @@protoc_insertion_point(serialize_end:dna_info.SyncInfo_S.User)
}

::google::protobuf::uint8* SyncInfo_S_User::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dna_info.SyncInfo_S.User)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dna_info.SyncInfo_S.User.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // optional int32 x_pos = 2;
  if (this->x_pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x_pos(), target);
  }

  // optional int32 y_pos = 3;
  if (this->y_pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y_pos(), target);
  }

  // optional int32 vec = 4;
  if (this->vec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vec(), target);
  }

  // optional int32 type = 5;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  // optional int32 A_type_pow = 6;
  if (this->a_type_pow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->a_type_pow(), target);
  }

  // optional int32 B_type_pow = 7;
  if (this->b_type_pow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->b_type_pow(), target);
  }

  // optional int32 C_type_pow = 8;
  if (this->c_type_pow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->c_type_pow(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dna_info.SyncInfo_S.User)
  return target;
}

size_t SyncInfo_S_User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dna_info.SyncInfo_S.User)
  size_t total_size = 0;

  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // optional int32 x_pos = 2;
  if (this->x_pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x_pos());
  }

  // optional int32 y_pos = 3;
  if (this->y_pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y_pos());
  }

  // optional int32 vec = 4;
  if (this->vec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vec());
  }

  // optional int32 type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional int32 A_type_pow = 6;
  if (this->a_type_pow() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->a_type_pow());
  }

  // optional int32 B_type_pow = 7;
  if (this->b_type_pow() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->b_type_pow());
  }

  // optional int32 C_type_pow = 8;
  if (this->c_type_pow() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->c_type_pow());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncInfo_S_User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dna_info.SyncInfo_S.User)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SyncInfo_S_User* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SyncInfo_S_User>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dna_info.SyncInfo_S.User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dna_info.SyncInfo_S.User)
    UnsafeMergeFrom(*source);
  }
}

void SyncInfo_S_User::MergeFrom(const SyncInfo_S_User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dna_info.SyncInfo_S.User)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SyncInfo_S_User::UnsafeMergeFrom(const SyncInfo_S_User& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.x_pos() != 0) {
    set_x_pos(from.x_pos());
  }
  if (from.y_pos() != 0) {
    set_y_pos(from.y_pos());
  }
  if (from.vec() != 0) {
    set_vec(from.vec());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.a_type_pow() != 0) {
    set_a_type_pow(from.a_type_pow());
  }
  if (from.b_type_pow() != 0) {
    set_b_type_pow(from.b_type_pow());
  }
  if (from.c_type_pow() != 0) {
    set_c_type_pow(from.c_type_pow());
  }
}

void SyncInfo_S_User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dna_info.SyncInfo_S.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncInfo_S_User::CopyFrom(const SyncInfo_S_User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dna_info.SyncInfo_S.User)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SyncInfo_S_User::IsInitialized() const {

  return true;
}

void SyncInfo_S_User::Swap(SyncInfo_S_User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncInfo_S_User::InternalSwap(SyncInfo_S_User* other) {
  user_id_.Swap(&other->user_id_);
  std::swap(x_pos_, other->x_pos_);
  std::swap(y_pos_, other->y_pos_);
  std::swap(vec_, other->vec_);
  std::swap(type_, other->type_);
  std::swap(a_type_pow_, other->a_type_pow_);
  std::swap(b_type_pow_, other->b_type_pow_);
  std::swap(c_type_pow_, other->c_type_pow_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SyncInfo_S_User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncInfo_S_User_descriptor_;
  metadata.reflection = SyncInfo_S_User_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncInfo_S::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncInfo_S::SyncInfo_S()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_protocol_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:dna_info.SyncInfo_S)
}

void SyncInfo_S::InitAsDefaultInstance() {
}

SyncInfo_S::SyncInfo_S(const SyncInfo_S& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dna_info.SyncInfo_S)
}

void SyncInfo_S::SharedCtor() {
  _cached_size_ = 0;
}

SyncInfo_S::~SyncInfo_S() {
  // @@protoc_insertion_point(destructor:dna_info.SyncInfo_S)
  SharedDtor();
}

void SyncInfo_S::SharedDtor() {
}

void SyncInfo_S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncInfo_S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncInfo_S_descriptor_;
}

const SyncInfo_S& SyncInfo_S::default_instance() {
  protobuf_InitDefaults_protocol_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SyncInfo_S> SyncInfo_S_default_instance_;

SyncInfo_S* SyncInfo_S::New(::google::protobuf::Arena* arena) const {
  SyncInfo_S* n = new SyncInfo_S;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SyncInfo_S::Clear() {
// @@protoc_insertion_point(message_clear_start:dna_info.SyncInfo_S)
  users_.Clear();
}

bool SyncInfo_S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dna_info.SyncInfo_S)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dna_info.SyncInfo_S.User users = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_users;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dna_info.SyncInfo_S)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dna_info.SyncInfo_S)
  return false;
#undef DO_
}

void SyncInfo_S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dna_info.SyncInfo_S)
  // repeated .dna_info.SyncInfo_S.User users = 2;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->users(i), output);
  }

  // @@protoc_insertion_point(serialize_end:dna_info.SyncInfo_S)
}

::google::protobuf::uint8* SyncInfo_S::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dna_info.SyncInfo_S)
  // repeated .dna_info.SyncInfo_S.User users = 2;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->users(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dna_info.SyncInfo_S)
  return target;
}

size_t SyncInfo_S::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dna_info.SyncInfo_S)
  size_t total_size = 0;

  // repeated .dna_info.SyncInfo_S.User users = 2;
  {
    unsigned int count = this->users_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->users(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncInfo_S::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dna_info.SyncInfo_S)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SyncInfo_S* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SyncInfo_S>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dna_info.SyncInfo_S)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dna_info.SyncInfo_S)
    UnsafeMergeFrom(*source);
  }
}

void SyncInfo_S::MergeFrom(const SyncInfo_S& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dna_info.SyncInfo_S)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SyncInfo_S::UnsafeMergeFrom(const SyncInfo_S& from) {
  GOOGLE_DCHECK(&from != this);
  users_.MergeFrom(from.users_);
}

void SyncInfo_S::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dna_info.SyncInfo_S)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncInfo_S::CopyFrom(const SyncInfo_S& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dna_info.SyncInfo_S)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SyncInfo_S::IsInitialized() const {

  return true;
}

void SyncInfo_S::Swap(SyncInfo_S* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncInfo_S::InternalSwap(SyncInfo_S* other) {
  users_.UnsafeArenaSwap(&other->users_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SyncInfo_S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncInfo_S_descriptor_;
  metadata.reflection = SyncInfo_S_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SyncInfo_S_User

// optional string user_id = 1;
void SyncInfo_S_User::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SyncInfo_S_User::user_id() const {
  // @@protoc_insertion_point(field_get:dna_info.SyncInfo_S.User.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SyncInfo_S_User::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dna_info.SyncInfo_S.User.user_id)
}
void SyncInfo_S_User::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dna_info.SyncInfo_S.User.user_id)
}
void SyncInfo_S_User::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dna_info.SyncInfo_S.User.user_id)
}
::std::string* SyncInfo_S_User::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:dna_info.SyncInfo_S.User.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SyncInfo_S_User::release_user_id() {
  // @@protoc_insertion_point(field_release:dna_info.SyncInfo_S.User.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SyncInfo_S_User::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:dna_info.SyncInfo_S.User.user_id)
}

// optional int32 x_pos = 2;
void SyncInfo_S_User::clear_x_pos() {
  x_pos_ = 0;
}
::google::protobuf::int32 SyncInfo_S_User::x_pos() const {
  // @@protoc_insertion_point(field_get:dna_info.SyncInfo_S.User.x_pos)
  return x_pos_;
}
void SyncInfo_S_User::set_x_pos(::google::protobuf::int32 value) {
  
  x_pos_ = value;
  // @@protoc_insertion_point(field_set:dna_info.SyncInfo_S.User.x_pos)
}

// optional int32 y_pos = 3;
void SyncInfo_S_User::clear_y_pos() {
  y_pos_ = 0;
}
::google::protobuf::int32 SyncInfo_S_User::y_pos() const {
  // @@protoc_insertion_point(field_get:dna_info.SyncInfo_S.User.y_pos)
  return y_pos_;
}
void SyncInfo_S_User::set_y_pos(::google::protobuf::int32 value) {
  
  y_pos_ = value;
  // @@protoc_insertion_point(field_set:dna_info.SyncInfo_S.User.y_pos)
}

// optional int32 vec = 4;
void SyncInfo_S_User::clear_vec() {
  vec_ = 0;
}
::google::protobuf::int32 SyncInfo_S_User::vec() const {
  // @@protoc_insertion_point(field_get:dna_info.SyncInfo_S.User.vec)
  return vec_;
}
void SyncInfo_S_User::set_vec(::google::protobuf::int32 value) {
  
  vec_ = value;
  // @@protoc_insertion_point(field_set:dna_info.SyncInfo_S.User.vec)
}

// optional int32 type = 5;
void SyncInfo_S_User::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 SyncInfo_S_User::type() const {
  // @@protoc_insertion_point(field_get:dna_info.SyncInfo_S.User.type)
  return type_;
}
void SyncInfo_S_User::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:dna_info.SyncInfo_S.User.type)
}

// optional int32 A_type_pow = 6;
void SyncInfo_S_User::clear_a_type_pow() {
  a_type_pow_ = 0;
}
::google::protobuf::int32 SyncInfo_S_User::a_type_pow() const {
  // @@protoc_insertion_point(field_get:dna_info.SyncInfo_S.User.A_type_pow)
  return a_type_pow_;
}
void SyncInfo_S_User::set_a_type_pow(::google::protobuf::int32 value) {
  
  a_type_pow_ = value;
  // @@protoc_insertion_point(field_set:dna_info.SyncInfo_S.User.A_type_pow)
}

// optional int32 B_type_pow = 7;
void SyncInfo_S_User::clear_b_type_pow() {
  b_type_pow_ = 0;
}
::google::protobuf::int32 SyncInfo_S_User::b_type_pow() const {
  // @@protoc_insertion_point(field_get:dna_info.SyncInfo_S.User.B_type_pow)
  return b_type_pow_;
}
void SyncInfo_S_User::set_b_type_pow(::google::protobuf::int32 value) {
  
  b_type_pow_ = value;
  // @@protoc_insertion_point(field_set:dna_info.SyncInfo_S.User.B_type_pow)
}

// optional int32 C_type_pow = 8;
void SyncInfo_S_User::clear_c_type_pow() {
  c_type_pow_ = 0;
}
::google::protobuf::int32 SyncInfo_S_User::c_type_pow() const {
  // @@protoc_insertion_point(field_get:dna_info.SyncInfo_S.User.C_type_pow)
  return c_type_pow_;
}
void SyncInfo_S_User::set_c_type_pow(::google::protobuf::int32 value) {
  
  c_type_pow_ = value;
  // @@protoc_insertion_point(field_set:dna_info.SyncInfo_S.User.C_type_pow)
}

inline const SyncInfo_S_User* SyncInfo_S_User::internal_default_instance() {
  return &SyncInfo_S_User_default_instance_.get();
}
// -------------------------------------------------------------------

// SyncInfo_S

// repeated .dna_info.SyncInfo_S.User users = 2;
int SyncInfo_S::users_size() const {
  return users_.size();
}
void SyncInfo_S::clear_users() {
  users_.Clear();
}
const ::dna_info::SyncInfo_S_User& SyncInfo_S::users(int index) const {
  // @@protoc_insertion_point(field_get:dna_info.SyncInfo_S.users)
  return users_.Get(index);
}
::dna_info::SyncInfo_S_User* SyncInfo_S::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:dna_info.SyncInfo_S.users)
  return users_.Mutable(index);
}
::dna_info::SyncInfo_S_User* SyncInfo_S::add_users() {
  // @@protoc_insertion_point(field_add:dna_info.SyncInfo_S.users)
  return users_.Add();
}
::google::protobuf::RepeatedPtrField< ::dna_info::SyncInfo_S_User >*
SyncInfo_S::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:dna_info.SyncInfo_S.users)
  return &users_;
}
const ::google::protobuf::RepeatedPtrField< ::dna_info::SyncInfo_S_User >&
SyncInfo_S::users() const {
  // @@protoc_insertion_point(field_list:dna_info.SyncInfo_S.users)
  return users_;
}

inline const SyncInfo_S* SyncInfo_S::internal_default_instance() {
  return &SyncInfo_S_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncInfo_C::kUserIdFieldNumber;
const int SyncInfo_C::kXPosFieldNumber;
const int SyncInfo_C::kYPosFieldNumber;
const int SyncInfo_C::kVecFieldNumber;
const int SyncInfo_C::kTypeFieldNumber;
const int SyncInfo_C::kATypePowFieldNumber;
const int SyncInfo_C::kBTypePowFieldNumber;
const int SyncInfo_C::kCTypePowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncInfo_C::SyncInfo_C()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_protocol_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:dna_info.SyncInfo_C)
}

void SyncInfo_C::InitAsDefaultInstance() {
}

SyncInfo_C::SyncInfo_C(const SyncInfo_C& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dna_info.SyncInfo_C)
}

void SyncInfo_C::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_pos_, 0, reinterpret_cast<char*>(&c_type_pow_) -
    reinterpret_cast<char*>(&x_pos_) + sizeof(c_type_pow_));
  _cached_size_ = 0;
}

SyncInfo_C::~SyncInfo_C() {
  // @@protoc_insertion_point(destructor:dna_info.SyncInfo_C)
  SharedDtor();
}

void SyncInfo_C::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SyncInfo_C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncInfo_C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncInfo_C_descriptor_;
}

const SyncInfo_C& SyncInfo_C::default_instance() {
  protobuf_InitDefaults_protocol_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SyncInfo_C> SyncInfo_C_default_instance_;

SyncInfo_C* SyncInfo_C::New(::google::protobuf::Arena* arena) const {
  SyncInfo_C* n = new SyncInfo_C;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SyncInfo_C::Clear() {
// @@protoc_insertion_point(message_clear_start:dna_info.SyncInfo_C)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SyncInfo_C, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SyncInfo_C*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_pos_, c_type_pow_);
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool SyncInfo_C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dna_info.SyncInfo_C)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dna_info.SyncInfo_C.user_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x_pos;
        break;
      }

      // optional int32 x_pos = 2;
      case 2: {
        if (tag == 16) {
         parse_x_pos:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_pos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_y_pos;
        break;
      }

      // optional int32 y_pos = 3;
      case 3: {
        if (tag == 24) {
         parse_y_pos:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_pos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_vec;
        break;
      }

      // optional int32 vec = 4;
      case 4: {
        if (tag == 32) {
         parse_vec:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vec_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional int32 type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_A_type_pow;
        break;
      }

      // optional int32 A_type_pow = 6;
      case 6: {
        if (tag == 48) {
         parse_A_type_pow:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a_type_pow_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_B_type_pow;
        break;
      }

      // optional int32 B_type_pow = 7;
      case 7: {
        if (tag == 56) {
         parse_B_type_pow:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_type_pow_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_C_type_pow;
        break;
      }

      // optional int32 C_type_pow = 8;
      case 8: {
        if (tag == 64) {
         parse_C_type_pow:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &c_type_pow_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dna_info.SyncInfo_C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dna_info.SyncInfo_C)
  return false;
#undef DO_
}

void SyncInfo_C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dna_info.SyncInfo_C)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dna_info.SyncInfo_C.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  // optional int32 x_pos = 2;
  if (this->x_pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x_pos(), output);
  }

  // optional int32 y_pos = 3;
  if (this->y_pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y_pos(), output);
  }

  // optional int32 vec = 4;
  if (this->vec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vec(), output);
  }

  // optional int32 type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // optional int32 A_type_pow = 6;
  if (this->a_type_pow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->a_type_pow(), output);
  }

  // optional int32 B_type_pow = 7;
  if (this->b_type_pow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->b_type_pow(), output);
  }

  // optional int32 C_type_pow = 8;
  if (this->c_type_pow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->c_type_pow(), output);
  }

  // @@protoc_insertion_point(serialize_end:dna_info.SyncInfo_C)
}

::google::protobuf::uint8* SyncInfo_C::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dna_info.SyncInfo_C)
  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dna_info.SyncInfo_C.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_id(), target);
  }

  // optional int32 x_pos = 2;
  if (this->x_pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x_pos(), target);
  }

  // optional int32 y_pos = 3;
  if (this->y_pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y_pos(), target);
  }

  // optional int32 vec = 4;
  if (this->vec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vec(), target);
  }

  // optional int32 type = 5;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  // optional int32 A_type_pow = 6;
  if (this->a_type_pow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->a_type_pow(), target);
  }

  // optional int32 B_type_pow = 7;
  if (this->b_type_pow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->b_type_pow(), target);
  }

  // optional int32 C_type_pow = 8;
  if (this->c_type_pow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->c_type_pow(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dna_info.SyncInfo_C)
  return target;
}

size_t SyncInfo_C::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dna_info.SyncInfo_C)
  size_t total_size = 0;

  // optional string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // optional int32 x_pos = 2;
  if (this->x_pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x_pos());
  }

  // optional int32 y_pos = 3;
  if (this->y_pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y_pos());
  }

  // optional int32 vec = 4;
  if (this->vec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vec());
  }

  // optional int32 type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional int32 A_type_pow = 6;
  if (this->a_type_pow() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->a_type_pow());
  }

  // optional int32 B_type_pow = 7;
  if (this->b_type_pow() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->b_type_pow());
  }

  // optional int32 C_type_pow = 8;
  if (this->c_type_pow() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->c_type_pow());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncInfo_C::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dna_info.SyncInfo_C)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SyncInfo_C* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SyncInfo_C>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dna_info.SyncInfo_C)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dna_info.SyncInfo_C)
    UnsafeMergeFrom(*source);
  }
}

void SyncInfo_C::MergeFrom(const SyncInfo_C& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dna_info.SyncInfo_C)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SyncInfo_C::UnsafeMergeFrom(const SyncInfo_C& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.x_pos() != 0) {
    set_x_pos(from.x_pos());
  }
  if (from.y_pos() != 0) {
    set_y_pos(from.y_pos());
  }
  if (from.vec() != 0) {
    set_vec(from.vec());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.a_type_pow() != 0) {
    set_a_type_pow(from.a_type_pow());
  }
  if (from.b_type_pow() != 0) {
    set_b_type_pow(from.b_type_pow());
  }
  if (from.c_type_pow() != 0) {
    set_c_type_pow(from.c_type_pow());
  }
}

void SyncInfo_C::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dna_info.SyncInfo_C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncInfo_C::CopyFrom(const SyncInfo_C& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dna_info.SyncInfo_C)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SyncInfo_C::IsInitialized() const {

  return true;
}

void SyncInfo_C::Swap(SyncInfo_C* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncInfo_C::InternalSwap(SyncInfo_C* other) {
  user_id_.Swap(&other->user_id_);
  std::swap(x_pos_, other->x_pos_);
  std::swap(y_pos_, other->y_pos_);
  std::swap(vec_, other->vec_);
  std::swap(type_, other->type_);
  std::swap(a_type_pow_, other->a_type_pow_);
  std::swap(b_type_pow_, other->b_type_pow_);
  std::swap(c_type_pow_, other->c_type_pow_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SyncInfo_C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncInfo_C_descriptor_;
  metadata.reflection = SyncInfo_C_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SyncInfo_C

// optional string user_id = 1;
void SyncInfo_C::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SyncInfo_C::user_id() const {
  // @@protoc_insertion_point(field_get:dna_info.SyncInfo_C.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SyncInfo_C::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dna_info.SyncInfo_C.user_id)
}
void SyncInfo_C::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dna_info.SyncInfo_C.user_id)
}
void SyncInfo_C::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dna_info.SyncInfo_C.user_id)
}
::std::string* SyncInfo_C::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:dna_info.SyncInfo_C.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SyncInfo_C::release_user_id() {
  // @@protoc_insertion_point(field_release:dna_info.SyncInfo_C.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SyncInfo_C::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:dna_info.SyncInfo_C.user_id)
}

// optional int32 x_pos = 2;
void SyncInfo_C::clear_x_pos() {
  x_pos_ = 0;
}
::google::protobuf::int32 SyncInfo_C::x_pos() const {
  // @@protoc_insertion_point(field_get:dna_info.SyncInfo_C.x_pos)
  return x_pos_;
}
void SyncInfo_C::set_x_pos(::google::protobuf::int32 value) {
  
  x_pos_ = value;
  // @@protoc_insertion_point(field_set:dna_info.SyncInfo_C.x_pos)
}

// optional int32 y_pos = 3;
void SyncInfo_C::clear_y_pos() {
  y_pos_ = 0;
}
::google::protobuf::int32 SyncInfo_C::y_pos() const {
  // @@protoc_insertion_point(field_get:dna_info.SyncInfo_C.y_pos)
  return y_pos_;
}
void SyncInfo_C::set_y_pos(::google::protobuf::int32 value) {
  
  y_pos_ = value;
  // @@protoc_insertion_point(field_set:dna_info.SyncInfo_C.y_pos)
}

// optional int32 vec = 4;
void SyncInfo_C::clear_vec() {
  vec_ = 0;
}
::google::protobuf::int32 SyncInfo_C::vec() const {
  // @@protoc_insertion_point(field_get:dna_info.SyncInfo_C.vec)
  return vec_;
}
void SyncInfo_C::set_vec(::google::protobuf::int32 value) {
  
  vec_ = value;
  // @@protoc_insertion_point(field_set:dna_info.SyncInfo_C.vec)
}

// optional int32 type = 5;
void SyncInfo_C::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 SyncInfo_C::type() const {
  // @@protoc_insertion_point(field_get:dna_info.SyncInfo_C.type)
  return type_;
}
void SyncInfo_C::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:dna_info.SyncInfo_C.type)
}

// optional int32 A_type_pow = 6;
void SyncInfo_C::clear_a_type_pow() {
  a_type_pow_ = 0;
}
::google::protobuf::int32 SyncInfo_C::a_type_pow() const {
  // @@protoc_insertion_point(field_get:dna_info.SyncInfo_C.A_type_pow)
  return a_type_pow_;
}
void SyncInfo_C::set_a_type_pow(::google::protobuf::int32 value) {
  
  a_type_pow_ = value;
  // @@protoc_insertion_point(field_set:dna_info.SyncInfo_C.A_type_pow)
}

// optional int32 B_type_pow = 7;
void SyncInfo_C::clear_b_type_pow() {
  b_type_pow_ = 0;
}
::google::protobuf::int32 SyncInfo_C::b_type_pow() const {
  // @@protoc_insertion_point(field_get:dna_info.SyncInfo_C.B_type_pow)
  return b_type_pow_;
}
void SyncInfo_C::set_b_type_pow(::google::protobuf::int32 value) {
  
  b_type_pow_ = value;
  // @@protoc_insertion_point(field_set:dna_info.SyncInfo_C.B_type_pow)
}

// optional int32 C_type_pow = 8;
void SyncInfo_C::clear_c_type_pow() {
  c_type_pow_ = 0;
}
::google::protobuf::int32 SyncInfo_C::c_type_pow() const {
  // @@protoc_insertion_point(field_get:dna_info.SyncInfo_C.C_type_pow)
  return c_type_pow_;
}
void SyncInfo_C::set_c_type_pow(::google::protobuf::int32 value) {
  
  c_type_pow_ = value;
  // @@protoc_insertion_point(field_set:dna_info.SyncInfo_C.C_type_pow)
}

inline const SyncInfo_C* SyncInfo_C::internal_default_instance() {
  return &SyncInfo_C_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dna_info

// @@protoc_insertion_point(global_scope)
